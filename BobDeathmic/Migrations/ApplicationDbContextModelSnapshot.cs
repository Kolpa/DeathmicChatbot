// <auto-generated />
using System;
using BobDeathmic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BobDeathmic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BobDeathmic.Models.ChatUserModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ChatUserName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("InitialPassword");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BobDeathmic.Models.Discord.RelayChannels", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("RelayChannels");
                });

            modelBuilder.Entity("BobDeathmic.Models.DiscordBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordID");

                    b.HasKey("Id");

                    b.ToTable("DiscordBans");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.AppointmentRequest", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventDateID");

                    b.Property<string>("OwnerId");

                    b.Property<int>("State");

                    b.HasKey("ID");

                    b.HasIndex("EventDateID");

                    b.HasIndex("OwnerId");

                    b.ToTable("AppointmentRequests");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<string>("AdministratorID");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.EventDate", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalendarId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("EventDateTemplateID");

                    b.Property<int?>("EventId");

                    b.Property<DateTime>("StartTime");

                    b.Property<DateTime>("StopTime");

                    b.HasKey("ID");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.EventDateTemplate", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int?>("EventId");

                    b.Property<DateTime>("StartTime");

                    b.Property<DateTime>("StopTime");

                    b.HasKey("ID");

                    b.HasIndex("EventId");

                    b.ToTable("EventDateTemplates");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.ManyMany.ChatUserModel_Event", b =>
                {
                    b.Property<string>("ChatUserModel_EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalendarID");

                    b.Property<string>("ChatUserModelID");

                    b.HasKey("ChatUserModel_EventID");

                    b.HasIndex("CalendarID");

                    b.HasIndex("ChatUserModelID");

                    b.ToTable("ChatUserModel_Event");
                });

            modelBuilder.Entity("BobDeathmic.Models.GiveAway.User_GiveAwayItem", b =>
                {
                    b.Property<string>("UserID");

                    b.Property<string>("GiveAwayItemID");

                    b.HasKey("UserID", "GiveAwayItemID");

                    b.HasIndex("GiveAwayItemID");

                    b.ToTable("User_GiveAway");
                });

            modelBuilder.Entity("BobDeathmic.Models.GiveAwayModels.GiveAwayItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<string>("OwnerID");

                    b.Property<string>("ReceiverID");

                    b.Property<string>("SteamID");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Views");

                    b.Property<bool>("current");

                    b.HasKey("Id");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("GiveAwayItems");
                });

            modelBuilder.Entity("BobDeathmic.Models.SecurityToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientID");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("code");

                    b.Property<string>("secret");

                    b.Property<int>("service");

                    b.Property<string>("token");

                    b.HasKey("ID");

                    b.ToTable("SecurityTokens");
                });

            modelBuilder.Entity("BobDeathmic.Models.Stream", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("ClientID");

                    b.Property<string>("DiscordRelayChannel");

                    b.Property<string>("Game");

                    b.Property<DateTime>("LastUpTime");

                    b.Property<string>("OwnerId");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Secret");

                    b.Property<DateTime>("Started");

                    b.Property<DateTime>("Stopped");

                    b.Property<string>("StreamName");

                    b.Property<int>("StreamState");

                    b.Property<int>("Type");

                    b.Property<int>("UpTimeInterval");

                    b.Property<string>("Url");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("OwnerId");

                    b.ToTable("StreamModels");
                });

            modelBuilder.Entity("BobDeathmic.Models.StreamCommand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutoInverval");

                    b.Property<DateTime>("LastExecution");

                    b.Property<int>("Mode");

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<string>("response")
                        .IsRequired();

                    b.Property<int>("streamID");

                    b.HasKey("ID");

                    b.HasIndex("streamID");

                    b.ToTable("StreamCommand");
                });

            modelBuilder.Entity("BobDeathmic.Models.StreamSubscription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("StreamID");

                    b.Property<int>("Subscribed");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("StreamID");

                    b.HasIndex("UserId");

                    b.ToTable("StreamSubscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.AppointmentRequest", b =>
                {
                    b.HasOne("BobDeathmic.Models.Events.EventDate", "EventDate")
                        .WithMany("Teilnahmen")
                        .HasForeignKey("EventDateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDeathmic.Models.ChatUserModel", "Owner")
                        .WithMany("AppointmentRequests")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.Event", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel", "Admin")
                        .WithMany("AdministratedCalendars")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.EventDate", b =>
                {
                    b.HasOne("BobDeathmic.Models.Events.Event", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.EventDateTemplate", b =>
                {
                    b.HasOne("BobDeathmic.Models.Events.Event", "Event")
                        .WithMany("EventDateTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDeathmic.Models.Events.ManyMany.ChatUserModel_Event", b =>
                {
                    b.HasOne("BobDeathmic.Models.Events.Event", "Calendar")
                        .WithMany("Members")
                        .HasForeignKey("CalendarID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDeathmic.Models.ChatUserModel", "ChatUserModel")
                        .WithMany("Calendars")
                        .HasForeignKey("ChatUserModelID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BobDeathmic.Models.GiveAway.User_GiveAwayItem", b =>
                {
                    b.HasOne("BobDeathmic.Models.GiveAwayModels.GiveAwayItem", "GiveAwayItem")
                        .WithMany("Applicants")
                        .HasForeignKey("GiveAwayItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDeathmic.Models.ChatUserModel", "User")
                        .WithMany("AppliedTo")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDeathmic.Models.GiveAwayModels.GiveAwayItem", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel", "Owner")
                        .WithMany("OwnedItems")
                        .HasForeignKey("OwnerID");

                    b.HasOne("BobDeathmic.Models.ChatUserModel", "Receiver")
                        .WithMany("ReceivedItems")
                        .HasForeignKey("ReceiverID");
                });

            modelBuilder.Entity("BobDeathmic.Models.Stream", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel", "Owner")
                        .WithMany("OwnedStreams")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDeathmic.Models.StreamCommand", b =>
                {
                    b.HasOne("BobDeathmic.Models.Stream", "stream")
                        .WithMany("Commands")
                        .HasForeignKey("streamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDeathmic.Models.StreamSubscription", b =>
                {
                    b.HasOne("BobDeathmic.Models.Stream", "Stream")
                        .WithMany("StreamSubscriptions")
                        .HasForeignKey("StreamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDeathmic.Models.ChatUserModel", "User")
                        .WithMany("StreamSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDeathmic.Models.ChatUserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BobDeathmic.Models.ChatUserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
